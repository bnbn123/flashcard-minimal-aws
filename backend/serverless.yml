org: qhien
app: serverless-flashcard-app
service: serverless-flashcard-app
frameworkVersion: '3.30.1'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
  # lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    FLASHCARDS_TABLE: serverless-flashcard-table-qhien-S${self:provider.stage}
    FLASHCARDS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-flashcard-images-qhien-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-flashcard-app

  logs:
    # Enable API Gateway logs
    restApi: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for flash card list
    models:
      - name: CreateFlashCardRequest
        contentType: application/json
        schema: ${file(models/create-flashcard-model.json)}
      - name: UpdateFlashCardRequest
        contentType: application/json
        schema: ${file(models/update-flashcard-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetFlashCards:
    handler: src/lambda/http/getFlashCards.handler
    events:
      - http:
          method: get
          path: flashcards
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  # TODO: Configure this function -
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource.
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below.
  CreateFlashcard:
    handler: src/lambda/http/createFlashCard.handler
    events:
      - http:
          method: post
          path: flashcards
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new to do
            description: Create a new to do
            requestModels:
              'application/json': CreateFlashCardRequest

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateFlashCard:
    handler: src/lambda/http/updateFlashCard.handler
    events:
      - http:
          method: patch
          path: flashcards/{flashCardId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a to do
            description: Update a to do
            requestModels:
              'application/json': UpdateFlashCardRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteFlashCard:
    handler: src/lambda/http/deleteFlashCard.handler
    events:
      - http:
          method: delete
          path: flashcards/{flashCardId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: flashcards/{flashCardId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FLASHCARDS_TABLE}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    FlashCardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: flashCardId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: flashCardId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FLASHCARDS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FLASHCARDS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ServerlessTod
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
